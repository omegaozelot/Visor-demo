import { TranscribeServiceException as __BaseException } from "./TranscribeServiceException";
export class BadRequestException extends __BaseException {
    constructor(opts) {
        super({
            name: "BadRequestException",
            $fault: "client",
            ...opts,
        });
        this.name = "BadRequestException";
        this.$fault = "client";
        Object.setPrototypeOf(this, BadRequestException.prototype);
        this.Message = opts.Message;
    }
}
export const BaseModelName = {
    NARROW_BAND: "NarrowBand",
    WIDE_BAND: "WideBand",
};
export const CallAnalyticsJobStatus = {
    COMPLETED: "COMPLETED",
    FAILED: "FAILED",
    IN_PROGRESS: "IN_PROGRESS",
    QUEUED: "QUEUED",
};
export const ParticipantRole = {
    AGENT: "AGENT",
    CUSTOMER: "CUSTOMER",
};
export const LanguageCode = {
    AF_ZA: "af-ZA",
    AR_AE: "ar-AE",
    AR_SA: "ar-SA",
    DA_DK: "da-DK",
    DE_CH: "de-CH",
    DE_DE: "de-DE",
    EN_AB: "en-AB",
    EN_AU: "en-AU",
    EN_GB: "en-GB",
    EN_IE: "en-IE",
    EN_IN: "en-IN",
    EN_NZ: "en-NZ",
    EN_US: "en-US",
    EN_WL: "en-WL",
    EN_ZA: "en-ZA",
    ES_ES: "es-ES",
    ES_US: "es-US",
    FA_IR: "fa-IR",
    FR_CA: "fr-CA",
    FR_FR: "fr-FR",
    HE_IL: "he-IL",
    HI_IN: "hi-IN",
    ID_ID: "id-ID",
    IT_IT: "it-IT",
    JA_JP: "ja-JP",
    KO_KR: "ko-KR",
    MS_MY: "ms-MY",
    NL_NL: "nl-NL",
    PT_BR: "pt-BR",
    PT_PT: "pt-PT",
    RU_RU: "ru-RU",
    SV_SE: "sv-SE",
    TA_IN: "ta-IN",
    TE_IN: "te-IN",
    TH_TH: "th-TH",
    TR_TR: "tr-TR",
    VI_VN: "vi-VN",
    ZH_CN: "zh-CN",
    ZH_TW: "zh-TW",
};
export const MediaFormat = {
    AMR: "amr",
    FLAC: "flac",
    MP3: "mp3",
    MP4: "mp4",
    OGG: "ogg",
    WAV: "wav",
    WEBM: "webm",
};
export const PiiEntityType = {
    ADDRESS: "ADDRESS",
    ALL: "ALL",
    BANK_ACCOUNT_NUMBER: "BANK_ACCOUNT_NUMBER",
    BANK_ROUTING: "BANK_ROUTING",
    CREDIT_DEBIT_CVV: "CREDIT_DEBIT_CVV",
    CREDIT_DEBIT_EXPIRY: "CREDIT_DEBIT_EXPIRY",
    CREDIT_DEBIT_NUMBER: "CREDIT_DEBIT_NUMBER",
    EMAIL: "EMAIL",
    NAME: "NAME",
    PHONE: "PHONE",
    PIN: "PIN",
    SSN: "SSN",
};
export const RedactionOutput = {
    REDACTED: "redacted",
    REDACTED_AND_UNREDACTED: "redacted_and_unredacted",
};
export const RedactionType = {
    PII: "PII",
};
export const VocabularyFilterMethod = {
    MASK: "mask",
    REMOVE: "remove",
    TAG: "tag",
};
export const InputType = {
    POST_CALL: "POST_CALL",
    REAL_TIME: "REAL_TIME",
};
export const SentimentValue = {
    MIXED: "MIXED",
    NEGATIVE: "NEGATIVE",
    NEUTRAL: "NEUTRAL",
    POSITIVE: "POSITIVE",
};
export const TranscriptFilterType = {
    EXACT: "EXACT",
};
export var Rule;
(function (Rule) {
    Rule.visit = (value, visitor) => {
        if (value.NonTalkTimeFilter !== undefined)
            return visitor.NonTalkTimeFilter(value.NonTalkTimeFilter);
        if (value.InterruptionFilter !== undefined)
            return visitor.InterruptionFilter(value.InterruptionFilter);
        if (value.TranscriptFilter !== undefined)
            return visitor.TranscriptFilter(value.TranscriptFilter);
        if (value.SentimentFilter !== undefined)
            return visitor.SentimentFilter(value.SentimentFilter);
        return visitor._(value.$unknown[0], value.$unknown[1]);
    };
})(Rule || (Rule = {}));
export const CLMLanguageCode = {
    DE_DE: "de-DE",
    EN_AU: "en-AU",
    EN_GB: "en-GB",
    EN_US: "en-US",
    ES_US: "es-US",
    HI_IN: "hi-IN",
    JA_JP: "ja-JP",
};
export class ConflictException extends __BaseException {
    constructor(opts) {
        super({
            name: "ConflictException",
            $fault: "client",
            ...opts,
        });
        this.name = "ConflictException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ConflictException.prototype);
        this.Message = opts.Message;
    }
}
export class InternalFailureException extends __BaseException {
    constructor(opts) {
        super({
            name: "InternalFailureException",
            $fault: "server",
            ...opts,
        });
        this.name = "InternalFailureException";
        this.$fault = "server";
        Object.setPrototypeOf(this, InternalFailureException.prototype);
        this.Message = opts.Message;
    }
}
export class LimitExceededException extends __BaseException {
    constructor(opts) {
        super({
            name: "LimitExceededException",
            $fault: "client",
            ...opts,
        });
        this.name = "LimitExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, LimitExceededException.prototype);
        this.Message = opts.Message;
    }
}
export const ModelStatus = {
    COMPLETED: "COMPLETED",
    FAILED: "FAILED",
    IN_PROGRESS: "IN_PROGRESS",
};
export const VocabularyState = {
    FAILED: "FAILED",
    PENDING: "PENDING",
    READY: "READY",
};
export class NotFoundException extends __BaseException {
    constructor(opts) {
        super({
            name: "NotFoundException",
            $fault: "client",
            ...opts,
        });
        this.name = "NotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, NotFoundException.prototype);
        this.Message = opts.Message;
    }
}
export const MedicalContentIdentificationType = {
    PHI: "PHI",
};
export const Specialty = {
    PRIMARYCARE: "PRIMARYCARE",
};
export const TranscriptionJobStatus = {
    COMPLETED: "COMPLETED",
    FAILED: "FAILED",
    IN_PROGRESS: "IN_PROGRESS",
    QUEUED: "QUEUED",
};
export const Type = {
    CONVERSATION: "CONVERSATION",
    DICTATION: "DICTATION",
};
export const SubtitleFormat = {
    SRT: "srt",
    VTT: "vtt",
};
export const OutputLocationType = {
    CUSTOMER_BUCKET: "CUSTOMER_BUCKET",
    SERVICE_BUCKET: "SERVICE_BUCKET",
};
