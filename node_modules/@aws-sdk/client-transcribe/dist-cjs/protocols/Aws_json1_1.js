"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.de_DeleteTranscriptionJobCommand = exports.de_DeleteMedicalVocabularyCommand = exports.de_DeleteMedicalTranscriptionJobCommand = exports.de_DeleteLanguageModelCommand = exports.de_DeleteCallAnalyticsJobCommand = exports.de_DeleteCallAnalyticsCategoryCommand = exports.de_CreateVocabularyFilterCommand = exports.de_CreateVocabularyCommand = exports.de_CreateMedicalVocabularyCommand = exports.de_CreateLanguageModelCommand = exports.de_CreateCallAnalyticsCategoryCommand = exports.se_UpdateVocabularyFilterCommand = exports.se_UpdateVocabularyCommand = exports.se_UpdateMedicalVocabularyCommand = exports.se_UpdateCallAnalyticsCategoryCommand = exports.se_UntagResourceCommand = exports.se_TagResourceCommand = exports.se_StartTranscriptionJobCommand = exports.se_StartMedicalTranscriptionJobCommand = exports.se_StartCallAnalyticsJobCommand = exports.se_ListVocabularyFiltersCommand = exports.se_ListVocabulariesCommand = exports.se_ListTranscriptionJobsCommand = exports.se_ListTagsForResourceCommand = exports.se_ListMedicalVocabulariesCommand = exports.se_ListMedicalTranscriptionJobsCommand = exports.se_ListLanguageModelsCommand = exports.se_ListCallAnalyticsJobsCommand = exports.se_ListCallAnalyticsCategoriesCommand = exports.se_GetVocabularyFilterCommand = exports.se_GetVocabularyCommand = exports.se_GetTranscriptionJobCommand = exports.se_GetMedicalVocabularyCommand = exports.se_GetMedicalTranscriptionJobCommand = exports.se_GetCallAnalyticsJobCommand = exports.se_GetCallAnalyticsCategoryCommand = exports.se_DescribeLanguageModelCommand = exports.se_DeleteVocabularyFilterCommand = exports.se_DeleteVocabularyCommand = exports.se_DeleteTranscriptionJobCommand = exports.se_DeleteMedicalVocabularyCommand = exports.se_DeleteMedicalTranscriptionJobCommand = exports.se_DeleteLanguageModelCommand = exports.se_DeleteCallAnalyticsJobCommand = exports.se_DeleteCallAnalyticsCategoryCommand = exports.se_CreateVocabularyFilterCommand = exports.se_CreateVocabularyCommand = exports.se_CreateMedicalVocabularyCommand = exports.se_CreateLanguageModelCommand = exports.se_CreateCallAnalyticsCategoryCommand = void 0;
exports.de_UpdateVocabularyFilterCommand = exports.de_UpdateVocabularyCommand = exports.de_UpdateMedicalVocabularyCommand = exports.de_UpdateCallAnalyticsCategoryCommand = exports.de_UntagResourceCommand = exports.de_TagResourceCommand = exports.de_StartTranscriptionJobCommand = exports.de_StartMedicalTranscriptionJobCommand = exports.de_StartCallAnalyticsJobCommand = exports.de_ListVocabularyFiltersCommand = exports.de_ListVocabulariesCommand = exports.de_ListTranscriptionJobsCommand = exports.de_ListTagsForResourceCommand = exports.de_ListMedicalVocabulariesCommand = exports.de_ListMedicalTranscriptionJobsCommand = exports.de_ListLanguageModelsCommand = exports.de_ListCallAnalyticsJobsCommand = exports.de_ListCallAnalyticsCategoriesCommand = exports.de_GetVocabularyFilterCommand = exports.de_GetVocabularyCommand = exports.de_GetTranscriptionJobCommand = exports.de_GetMedicalVocabularyCommand = exports.de_GetMedicalTranscriptionJobCommand = exports.de_GetCallAnalyticsJobCommand = exports.de_GetCallAnalyticsCategoryCommand = exports.de_DescribeLanguageModelCommand = exports.de_DeleteVocabularyFilterCommand = exports.de_DeleteVocabularyCommand = void 0;
const protocol_http_1 = require("@smithy/protocol-http");
const smithy_client_1 = require("@smithy/smithy-client");
const models_0_1 = require("../models/models_0");
const TranscribeServiceException_1 = require("../models/TranscribeServiceException");
const se_CreateCallAnalyticsCategoryCommand = async (input, context) => {
    const headers = sharedHeaders("CreateCallAnalyticsCategory");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_CreateCallAnalyticsCategoryCommand = se_CreateCallAnalyticsCategoryCommand;
const se_CreateLanguageModelCommand = async (input, context) => {
    const headers = sharedHeaders("CreateLanguageModel");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_CreateLanguageModelCommand = se_CreateLanguageModelCommand;
const se_CreateMedicalVocabularyCommand = async (input, context) => {
    const headers = sharedHeaders("CreateMedicalVocabulary");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_CreateMedicalVocabularyCommand = se_CreateMedicalVocabularyCommand;
const se_CreateVocabularyCommand = async (input, context) => {
    const headers = sharedHeaders("CreateVocabulary");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_CreateVocabularyCommand = se_CreateVocabularyCommand;
const se_CreateVocabularyFilterCommand = async (input, context) => {
    const headers = sharedHeaders("CreateVocabularyFilter");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_CreateVocabularyFilterCommand = se_CreateVocabularyFilterCommand;
const se_DeleteCallAnalyticsCategoryCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteCallAnalyticsCategory");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DeleteCallAnalyticsCategoryCommand = se_DeleteCallAnalyticsCategoryCommand;
const se_DeleteCallAnalyticsJobCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteCallAnalyticsJob");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DeleteCallAnalyticsJobCommand = se_DeleteCallAnalyticsJobCommand;
const se_DeleteLanguageModelCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteLanguageModel");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DeleteLanguageModelCommand = se_DeleteLanguageModelCommand;
const se_DeleteMedicalTranscriptionJobCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteMedicalTranscriptionJob");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DeleteMedicalTranscriptionJobCommand = se_DeleteMedicalTranscriptionJobCommand;
const se_DeleteMedicalVocabularyCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteMedicalVocabulary");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DeleteMedicalVocabularyCommand = se_DeleteMedicalVocabularyCommand;
const se_DeleteTranscriptionJobCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteTranscriptionJob");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DeleteTranscriptionJobCommand = se_DeleteTranscriptionJobCommand;
const se_DeleteVocabularyCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteVocabulary");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DeleteVocabularyCommand = se_DeleteVocabularyCommand;
const se_DeleteVocabularyFilterCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteVocabularyFilter");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DeleteVocabularyFilterCommand = se_DeleteVocabularyFilterCommand;
const se_DescribeLanguageModelCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeLanguageModel");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DescribeLanguageModelCommand = se_DescribeLanguageModelCommand;
const se_GetCallAnalyticsCategoryCommand = async (input, context) => {
    const headers = sharedHeaders("GetCallAnalyticsCategory");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetCallAnalyticsCategoryCommand = se_GetCallAnalyticsCategoryCommand;
const se_GetCallAnalyticsJobCommand = async (input, context) => {
    const headers = sharedHeaders("GetCallAnalyticsJob");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetCallAnalyticsJobCommand = se_GetCallAnalyticsJobCommand;
const se_GetMedicalTranscriptionJobCommand = async (input, context) => {
    const headers = sharedHeaders("GetMedicalTranscriptionJob");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetMedicalTranscriptionJobCommand = se_GetMedicalTranscriptionJobCommand;
const se_GetMedicalVocabularyCommand = async (input, context) => {
    const headers = sharedHeaders("GetMedicalVocabulary");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetMedicalVocabularyCommand = se_GetMedicalVocabularyCommand;
const se_GetTranscriptionJobCommand = async (input, context) => {
    const headers = sharedHeaders("GetTranscriptionJob");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetTranscriptionJobCommand = se_GetTranscriptionJobCommand;
const se_GetVocabularyCommand = async (input, context) => {
    const headers = sharedHeaders("GetVocabulary");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetVocabularyCommand = se_GetVocabularyCommand;
const se_GetVocabularyFilterCommand = async (input, context) => {
    const headers = sharedHeaders("GetVocabularyFilter");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetVocabularyFilterCommand = se_GetVocabularyFilterCommand;
const se_ListCallAnalyticsCategoriesCommand = async (input, context) => {
    const headers = sharedHeaders("ListCallAnalyticsCategories");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_ListCallAnalyticsCategoriesCommand = se_ListCallAnalyticsCategoriesCommand;
const se_ListCallAnalyticsJobsCommand = async (input, context) => {
    const headers = sharedHeaders("ListCallAnalyticsJobs");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_ListCallAnalyticsJobsCommand = se_ListCallAnalyticsJobsCommand;
const se_ListLanguageModelsCommand = async (input, context) => {
    const headers = sharedHeaders("ListLanguageModels");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_ListLanguageModelsCommand = se_ListLanguageModelsCommand;
const se_ListMedicalTranscriptionJobsCommand = async (input, context) => {
    const headers = sharedHeaders("ListMedicalTranscriptionJobs");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_ListMedicalTranscriptionJobsCommand = se_ListMedicalTranscriptionJobsCommand;
const se_ListMedicalVocabulariesCommand = async (input, context) => {
    const headers = sharedHeaders("ListMedicalVocabularies");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_ListMedicalVocabulariesCommand = se_ListMedicalVocabulariesCommand;
const se_ListTagsForResourceCommand = async (input, context) => {
    const headers = sharedHeaders("ListTagsForResource");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_ListTagsForResourceCommand = se_ListTagsForResourceCommand;
const se_ListTranscriptionJobsCommand = async (input, context) => {
    const headers = sharedHeaders("ListTranscriptionJobs");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_ListTranscriptionJobsCommand = se_ListTranscriptionJobsCommand;
const se_ListVocabulariesCommand = async (input, context) => {
    const headers = sharedHeaders("ListVocabularies");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_ListVocabulariesCommand = se_ListVocabulariesCommand;
const se_ListVocabularyFiltersCommand = async (input, context) => {
    const headers = sharedHeaders("ListVocabularyFilters");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_ListVocabularyFiltersCommand = se_ListVocabularyFiltersCommand;
const se_StartCallAnalyticsJobCommand = async (input, context) => {
    const headers = sharedHeaders("StartCallAnalyticsJob");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_StartCallAnalyticsJobCommand = se_StartCallAnalyticsJobCommand;
const se_StartMedicalTranscriptionJobCommand = async (input, context) => {
    const headers = sharedHeaders("StartMedicalTranscriptionJob");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_StartMedicalTranscriptionJobCommand = se_StartMedicalTranscriptionJobCommand;
const se_StartTranscriptionJobCommand = async (input, context) => {
    const headers = sharedHeaders("StartTranscriptionJob");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_StartTranscriptionJobCommand = se_StartTranscriptionJobCommand;
const se_TagResourceCommand = async (input, context) => {
    const headers = sharedHeaders("TagResource");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_TagResourceCommand = se_TagResourceCommand;
const se_UntagResourceCommand = async (input, context) => {
    const headers = sharedHeaders("UntagResource");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_UntagResourceCommand = se_UntagResourceCommand;
const se_UpdateCallAnalyticsCategoryCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateCallAnalyticsCategory");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_UpdateCallAnalyticsCategoryCommand = se_UpdateCallAnalyticsCategoryCommand;
const se_UpdateMedicalVocabularyCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateMedicalVocabulary");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_UpdateMedicalVocabularyCommand = se_UpdateMedicalVocabularyCommand;
const se_UpdateVocabularyCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateVocabulary");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_UpdateVocabularyCommand = se_UpdateVocabularyCommand;
const se_UpdateVocabularyFilterCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateVocabularyFilter");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_UpdateVocabularyFilterCommand = se_UpdateVocabularyFilterCommand;
const de_CreateCallAnalyticsCategoryCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateCallAnalyticsCategoryCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateCallAnalyticsCategoryResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_CreateCallAnalyticsCategoryCommand = de_CreateCallAnalyticsCategoryCommand;
const de_CreateCallAnalyticsCategoryCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.transcribe#BadRequestException":
            throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.transcribe#ConflictException":
            throw await de_ConflictExceptionRes(parsedOutput, context);
        case "InternalFailureException":
        case "com.amazonaws.transcribe#InternalFailureException":
            throw await de_InternalFailureExceptionRes(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.transcribe#LimitExceededException":
            throw await de_LimitExceededExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_CreateLanguageModelCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateLanguageModelCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_CreateLanguageModelCommand = de_CreateLanguageModelCommand;
const de_CreateLanguageModelCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.transcribe#BadRequestException":
            throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.transcribe#ConflictException":
            throw await de_ConflictExceptionRes(parsedOutput, context);
        case "InternalFailureException":
        case "com.amazonaws.transcribe#InternalFailureException":
            throw await de_InternalFailureExceptionRes(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.transcribe#LimitExceededException":
            throw await de_LimitExceededExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_CreateMedicalVocabularyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateMedicalVocabularyCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateMedicalVocabularyResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_CreateMedicalVocabularyCommand = de_CreateMedicalVocabularyCommand;
const de_CreateMedicalVocabularyCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.transcribe#BadRequestException":
            throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.transcribe#ConflictException":
            throw await de_ConflictExceptionRes(parsedOutput, context);
        case "InternalFailureException":
        case "com.amazonaws.transcribe#InternalFailureException":
            throw await de_InternalFailureExceptionRes(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.transcribe#LimitExceededException":
            throw await de_LimitExceededExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_CreateVocabularyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateVocabularyCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateVocabularyResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_CreateVocabularyCommand = de_CreateVocabularyCommand;
const de_CreateVocabularyCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.transcribe#BadRequestException":
            throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.transcribe#ConflictException":
            throw await de_ConflictExceptionRes(parsedOutput, context);
        case "InternalFailureException":
        case "com.amazonaws.transcribe#InternalFailureException":
            throw await de_InternalFailureExceptionRes(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.transcribe#LimitExceededException":
            throw await de_LimitExceededExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_CreateVocabularyFilterCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateVocabularyFilterCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateVocabularyFilterResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_CreateVocabularyFilterCommand = de_CreateVocabularyFilterCommand;
const de_CreateVocabularyFilterCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.transcribe#BadRequestException":
            throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.transcribe#ConflictException":
            throw await de_ConflictExceptionRes(parsedOutput, context);
        case "InternalFailureException":
        case "com.amazonaws.transcribe#InternalFailureException":
            throw await de_InternalFailureExceptionRes(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.transcribe#LimitExceededException":
            throw await de_LimitExceededExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_DeleteCallAnalyticsCategoryCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteCallAnalyticsCategoryCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_DeleteCallAnalyticsCategoryCommand = de_DeleteCallAnalyticsCategoryCommand;
const de_DeleteCallAnalyticsCategoryCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.transcribe#BadRequestException":
            throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "InternalFailureException":
        case "com.amazonaws.transcribe#InternalFailureException":
            throw await de_InternalFailureExceptionRes(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.transcribe#LimitExceededException":
            throw await de_LimitExceededExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.transcribe#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_DeleteCallAnalyticsJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteCallAnalyticsJobCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_DeleteCallAnalyticsJobCommand = de_DeleteCallAnalyticsJobCommand;
const de_DeleteCallAnalyticsJobCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.transcribe#BadRequestException":
            throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "InternalFailureException":
        case "com.amazonaws.transcribe#InternalFailureException":
            throw await de_InternalFailureExceptionRes(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.transcribe#LimitExceededException":
            throw await de_LimitExceededExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_DeleteLanguageModelCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteLanguageModelCommandError(output, context);
    }
    await (0, smithy_client_1.collectBody)(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
exports.de_DeleteLanguageModelCommand = de_DeleteLanguageModelCommand;
const de_DeleteLanguageModelCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.transcribe#BadRequestException":
            throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "InternalFailureException":
        case "com.amazonaws.transcribe#InternalFailureException":
            throw await de_InternalFailureExceptionRes(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.transcribe#LimitExceededException":
            throw await de_LimitExceededExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_DeleteMedicalTranscriptionJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteMedicalTranscriptionJobCommandError(output, context);
    }
    await (0, smithy_client_1.collectBody)(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
exports.de_DeleteMedicalTranscriptionJobCommand = de_DeleteMedicalTranscriptionJobCommand;
const de_DeleteMedicalTranscriptionJobCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.transcribe#BadRequestException":
            throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "InternalFailureException":
        case "com.amazonaws.transcribe#InternalFailureException":
            throw await de_InternalFailureExceptionRes(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.transcribe#LimitExceededException":
            throw await de_LimitExceededExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_DeleteMedicalVocabularyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteMedicalVocabularyCommandError(output, context);
    }
    await (0, smithy_client_1.collectBody)(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
exports.de_DeleteMedicalVocabularyCommand = de_DeleteMedicalVocabularyCommand;
const de_DeleteMedicalVocabularyCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.transcribe#BadRequestException":
            throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "InternalFailureException":
        case "com.amazonaws.transcribe#InternalFailureException":
            throw await de_InternalFailureExceptionRes(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.transcribe#LimitExceededException":
            throw await de_LimitExceededExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.transcribe#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_DeleteTranscriptionJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteTranscriptionJobCommandError(output, context);
    }
    await (0, smithy_client_1.collectBody)(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
exports.de_DeleteTranscriptionJobCommand = de_DeleteTranscriptionJobCommand;
const de_DeleteTranscriptionJobCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.transcribe#BadRequestException":
            throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "InternalFailureException":
        case "com.amazonaws.transcribe#InternalFailureException":
            throw await de_InternalFailureExceptionRes(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.transcribe#LimitExceededException":
            throw await de_LimitExceededExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_DeleteVocabularyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteVocabularyCommandError(output, context);
    }
    await (0, smithy_client_1.collectBody)(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
exports.de_DeleteVocabularyCommand = de_DeleteVocabularyCommand;
const de_DeleteVocabularyCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.transcribe#BadRequestException":
            throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "InternalFailureException":
        case "com.amazonaws.transcribe#InternalFailureException":
            throw await de_InternalFailureExceptionRes(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.transcribe#LimitExceededException":
            throw await de_LimitExceededExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.transcribe#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_DeleteVocabularyFilterCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteVocabularyFilterCommandError(output, context);
    }
    await (0, smithy_client_1.collectBody)(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
exports.de_DeleteVocabularyFilterCommand = de_DeleteVocabularyFilterCommand;
const de_DeleteVocabularyFilterCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.transcribe#BadRequestException":
            throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "InternalFailureException":
        case "com.amazonaws.transcribe#InternalFailureException":
            throw await de_InternalFailureExceptionRes(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.transcribe#LimitExceededException":
            throw await de_LimitExceededExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.transcribe#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_DescribeLanguageModelCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeLanguageModelCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeLanguageModelResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_DescribeLanguageModelCommand = de_DescribeLanguageModelCommand;
const de_DescribeLanguageModelCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.transcribe#BadRequestException":
            throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "InternalFailureException":
        case "com.amazonaws.transcribe#InternalFailureException":
            throw await de_InternalFailureExceptionRes(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.transcribe#LimitExceededException":
            throw await de_LimitExceededExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.transcribe#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_GetCallAnalyticsCategoryCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetCallAnalyticsCategoryCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetCallAnalyticsCategoryResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_GetCallAnalyticsCategoryCommand = de_GetCallAnalyticsCategoryCommand;
const de_GetCallAnalyticsCategoryCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.transcribe#BadRequestException":
            throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "InternalFailureException":
        case "com.amazonaws.transcribe#InternalFailureException":
            throw await de_InternalFailureExceptionRes(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.transcribe#LimitExceededException":
            throw await de_LimitExceededExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.transcribe#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_GetCallAnalyticsJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetCallAnalyticsJobCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetCallAnalyticsJobResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_GetCallAnalyticsJobCommand = de_GetCallAnalyticsJobCommand;
const de_GetCallAnalyticsJobCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.transcribe#BadRequestException":
            throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "InternalFailureException":
        case "com.amazonaws.transcribe#InternalFailureException":
            throw await de_InternalFailureExceptionRes(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.transcribe#LimitExceededException":
            throw await de_LimitExceededExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.transcribe#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_GetMedicalTranscriptionJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetMedicalTranscriptionJobCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetMedicalTranscriptionJobResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_GetMedicalTranscriptionJobCommand = de_GetMedicalTranscriptionJobCommand;
const de_GetMedicalTranscriptionJobCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.transcribe#BadRequestException":
            throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "InternalFailureException":
        case "com.amazonaws.transcribe#InternalFailureException":
            throw await de_InternalFailureExceptionRes(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.transcribe#LimitExceededException":
            throw await de_LimitExceededExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.transcribe#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_GetMedicalVocabularyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetMedicalVocabularyCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetMedicalVocabularyResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_GetMedicalVocabularyCommand = de_GetMedicalVocabularyCommand;
const de_GetMedicalVocabularyCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.transcribe#BadRequestException":
            throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "InternalFailureException":
        case "com.amazonaws.transcribe#InternalFailureException":
            throw await de_InternalFailureExceptionRes(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.transcribe#LimitExceededException":
            throw await de_LimitExceededExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.transcribe#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_GetTranscriptionJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetTranscriptionJobCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetTranscriptionJobResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_GetTranscriptionJobCommand = de_GetTranscriptionJobCommand;
const de_GetTranscriptionJobCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.transcribe#BadRequestException":
            throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "InternalFailureException":
        case "com.amazonaws.transcribe#InternalFailureException":
            throw await de_InternalFailureExceptionRes(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.transcribe#LimitExceededException":
            throw await de_LimitExceededExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.transcribe#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_GetVocabularyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetVocabularyCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetVocabularyResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_GetVocabularyCommand = de_GetVocabularyCommand;
const de_GetVocabularyCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.transcribe#BadRequestException":
            throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "InternalFailureException":
        case "com.amazonaws.transcribe#InternalFailureException":
            throw await de_InternalFailureExceptionRes(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.transcribe#LimitExceededException":
            throw await de_LimitExceededExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.transcribe#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_GetVocabularyFilterCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetVocabularyFilterCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetVocabularyFilterResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_GetVocabularyFilterCommand = de_GetVocabularyFilterCommand;
const de_GetVocabularyFilterCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.transcribe#BadRequestException":
            throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "InternalFailureException":
        case "com.amazonaws.transcribe#InternalFailureException":
            throw await de_InternalFailureExceptionRes(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.transcribe#LimitExceededException":
            throw await de_LimitExceededExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.transcribe#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_ListCallAnalyticsCategoriesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ListCallAnalyticsCategoriesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListCallAnalyticsCategoriesResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_ListCallAnalyticsCategoriesCommand = de_ListCallAnalyticsCategoriesCommand;
const de_ListCallAnalyticsCategoriesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.transcribe#BadRequestException":
            throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "InternalFailureException":
        case "com.amazonaws.transcribe#InternalFailureException":
            throw await de_InternalFailureExceptionRes(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.transcribe#LimitExceededException":
            throw await de_LimitExceededExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_ListCallAnalyticsJobsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ListCallAnalyticsJobsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListCallAnalyticsJobsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_ListCallAnalyticsJobsCommand = de_ListCallAnalyticsJobsCommand;
const de_ListCallAnalyticsJobsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.transcribe#BadRequestException":
            throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "InternalFailureException":
        case "com.amazonaws.transcribe#InternalFailureException":
            throw await de_InternalFailureExceptionRes(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.transcribe#LimitExceededException":
            throw await de_LimitExceededExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_ListLanguageModelsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ListLanguageModelsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListLanguageModelsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_ListLanguageModelsCommand = de_ListLanguageModelsCommand;
const de_ListLanguageModelsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.transcribe#BadRequestException":
            throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "InternalFailureException":
        case "com.amazonaws.transcribe#InternalFailureException":
            throw await de_InternalFailureExceptionRes(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.transcribe#LimitExceededException":
            throw await de_LimitExceededExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_ListMedicalTranscriptionJobsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ListMedicalTranscriptionJobsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListMedicalTranscriptionJobsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_ListMedicalTranscriptionJobsCommand = de_ListMedicalTranscriptionJobsCommand;
const de_ListMedicalTranscriptionJobsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.transcribe#BadRequestException":
            throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "InternalFailureException":
        case "com.amazonaws.transcribe#InternalFailureException":
            throw await de_InternalFailureExceptionRes(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.transcribe#LimitExceededException":
            throw await de_LimitExceededExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_ListMedicalVocabulariesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ListMedicalVocabulariesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListMedicalVocabulariesResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_ListMedicalVocabulariesCommand = de_ListMedicalVocabulariesCommand;
const de_ListMedicalVocabulariesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.transcribe#BadRequestException":
            throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "InternalFailureException":
        case "com.amazonaws.transcribe#InternalFailureException":
            throw await de_InternalFailureExceptionRes(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.transcribe#LimitExceededException":
            throw await de_LimitExceededExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_ListTagsForResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ListTagsForResourceCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_ListTagsForResourceCommand = de_ListTagsForResourceCommand;
const de_ListTagsForResourceCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.transcribe#BadRequestException":
            throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "InternalFailureException":
        case "com.amazonaws.transcribe#InternalFailureException":
            throw await de_InternalFailureExceptionRes(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.transcribe#LimitExceededException":
            throw await de_LimitExceededExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.transcribe#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_ListTranscriptionJobsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ListTranscriptionJobsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListTranscriptionJobsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_ListTranscriptionJobsCommand = de_ListTranscriptionJobsCommand;
const de_ListTranscriptionJobsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.transcribe#BadRequestException":
            throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "InternalFailureException":
        case "com.amazonaws.transcribe#InternalFailureException":
            throw await de_InternalFailureExceptionRes(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.transcribe#LimitExceededException":
            throw await de_LimitExceededExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_ListVocabulariesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ListVocabulariesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListVocabulariesResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_ListVocabulariesCommand = de_ListVocabulariesCommand;
const de_ListVocabulariesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.transcribe#BadRequestException":
            throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "InternalFailureException":
        case "com.amazonaws.transcribe#InternalFailureException":
            throw await de_InternalFailureExceptionRes(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.transcribe#LimitExceededException":
            throw await de_LimitExceededExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_ListVocabularyFiltersCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ListVocabularyFiltersCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListVocabularyFiltersResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_ListVocabularyFiltersCommand = de_ListVocabularyFiltersCommand;
const de_ListVocabularyFiltersCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.transcribe#BadRequestException":
            throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "InternalFailureException":
        case "com.amazonaws.transcribe#InternalFailureException":
            throw await de_InternalFailureExceptionRes(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.transcribe#LimitExceededException":
            throw await de_LimitExceededExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_StartCallAnalyticsJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_StartCallAnalyticsJobCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_StartCallAnalyticsJobResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_StartCallAnalyticsJobCommand = de_StartCallAnalyticsJobCommand;
const de_StartCallAnalyticsJobCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.transcribe#BadRequestException":
            throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.transcribe#ConflictException":
            throw await de_ConflictExceptionRes(parsedOutput, context);
        case "InternalFailureException":
        case "com.amazonaws.transcribe#InternalFailureException":
            throw await de_InternalFailureExceptionRes(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.transcribe#LimitExceededException":
            throw await de_LimitExceededExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_StartMedicalTranscriptionJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_StartMedicalTranscriptionJobCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_StartMedicalTranscriptionJobResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_StartMedicalTranscriptionJobCommand = de_StartMedicalTranscriptionJobCommand;
const de_StartMedicalTranscriptionJobCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.transcribe#BadRequestException":
            throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.transcribe#ConflictException":
            throw await de_ConflictExceptionRes(parsedOutput, context);
        case "InternalFailureException":
        case "com.amazonaws.transcribe#InternalFailureException":
            throw await de_InternalFailureExceptionRes(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.transcribe#LimitExceededException":
            throw await de_LimitExceededExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_StartTranscriptionJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_StartTranscriptionJobCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_StartTranscriptionJobResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_StartTranscriptionJobCommand = de_StartTranscriptionJobCommand;
const de_StartTranscriptionJobCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.transcribe#BadRequestException":
            throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.transcribe#ConflictException":
            throw await de_ConflictExceptionRes(parsedOutput, context);
        case "InternalFailureException":
        case "com.amazonaws.transcribe#InternalFailureException":
            throw await de_InternalFailureExceptionRes(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.transcribe#LimitExceededException":
            throw await de_LimitExceededExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_TagResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_TagResourceCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_TagResourceCommand = de_TagResourceCommand;
const de_TagResourceCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.transcribe#BadRequestException":
            throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.transcribe#ConflictException":
            throw await de_ConflictExceptionRes(parsedOutput, context);
        case "InternalFailureException":
        case "com.amazonaws.transcribe#InternalFailureException":
            throw await de_InternalFailureExceptionRes(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.transcribe#LimitExceededException":
            throw await de_LimitExceededExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.transcribe#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_UntagResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_UntagResourceCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_UntagResourceCommand = de_UntagResourceCommand;
const de_UntagResourceCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.transcribe#BadRequestException":
            throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.transcribe#ConflictException":
            throw await de_ConflictExceptionRes(parsedOutput, context);
        case "InternalFailureException":
        case "com.amazonaws.transcribe#InternalFailureException":
            throw await de_InternalFailureExceptionRes(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.transcribe#LimitExceededException":
            throw await de_LimitExceededExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.transcribe#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_UpdateCallAnalyticsCategoryCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_UpdateCallAnalyticsCategoryCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_UpdateCallAnalyticsCategoryResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_UpdateCallAnalyticsCategoryCommand = de_UpdateCallAnalyticsCategoryCommand;
const de_UpdateCallAnalyticsCategoryCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.transcribe#BadRequestException":
            throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.transcribe#ConflictException":
            throw await de_ConflictExceptionRes(parsedOutput, context);
        case "InternalFailureException":
        case "com.amazonaws.transcribe#InternalFailureException":
            throw await de_InternalFailureExceptionRes(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.transcribe#LimitExceededException":
            throw await de_LimitExceededExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.transcribe#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_UpdateMedicalVocabularyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_UpdateMedicalVocabularyCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_UpdateMedicalVocabularyResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_UpdateMedicalVocabularyCommand = de_UpdateMedicalVocabularyCommand;
const de_UpdateMedicalVocabularyCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.transcribe#BadRequestException":
            throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.transcribe#ConflictException":
            throw await de_ConflictExceptionRes(parsedOutput, context);
        case "InternalFailureException":
        case "com.amazonaws.transcribe#InternalFailureException":
            throw await de_InternalFailureExceptionRes(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.transcribe#LimitExceededException":
            throw await de_LimitExceededExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.transcribe#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_UpdateVocabularyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_UpdateVocabularyCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_UpdateVocabularyResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_UpdateVocabularyCommand = de_UpdateVocabularyCommand;
const de_UpdateVocabularyCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.transcribe#BadRequestException":
            throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.transcribe#ConflictException":
            throw await de_ConflictExceptionRes(parsedOutput, context);
        case "InternalFailureException":
        case "com.amazonaws.transcribe#InternalFailureException":
            throw await de_InternalFailureExceptionRes(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.transcribe#LimitExceededException":
            throw await de_LimitExceededExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.transcribe#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_UpdateVocabularyFilterCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_UpdateVocabularyFilterCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_UpdateVocabularyFilterResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_UpdateVocabularyFilterCommand = de_UpdateVocabularyFilterCommand;
const de_UpdateVocabularyFilterCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.transcribe#BadRequestException":
            throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "InternalFailureException":
        case "com.amazonaws.transcribe#InternalFailureException":
            throw await de_InternalFailureExceptionRes(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.transcribe#LimitExceededException":
            throw await de_LimitExceededExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.transcribe#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_BadRequestExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.BadRequestException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_ConflictExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.ConflictException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_InternalFailureExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.InternalFailureException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_LimitExceededExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.LimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_NotFoundExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.NotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_CallAnalyticsJob = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        CallAnalyticsJobName: smithy_client_1.expectString,
        CallAnalyticsJobStatus: smithy_client_1.expectString,
        ChannelDefinitions: smithy_client_1._json,
        CompletionTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        CreationTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        DataAccessRoleArn: smithy_client_1.expectString,
        FailureReason: smithy_client_1.expectString,
        IdentifiedLanguageScore: smithy_client_1.limitedParseFloat32,
        LanguageCode: smithy_client_1.expectString,
        Media: smithy_client_1._json,
        MediaFormat: smithy_client_1.expectString,
        MediaSampleRateHertz: smithy_client_1.expectInt32,
        Settings: smithy_client_1._json,
        StartTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        Transcript: smithy_client_1._json,
    });
};
const de_CallAnalyticsJobSummaries = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_CallAnalyticsJobSummary(entry, context);
    });
    return retVal;
};
const de_CallAnalyticsJobSummary = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        CallAnalyticsJobName: smithy_client_1.expectString,
        CallAnalyticsJobStatus: smithy_client_1.expectString,
        CompletionTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        CreationTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        FailureReason: smithy_client_1.expectString,
        LanguageCode: smithy_client_1.expectString,
        StartTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
    });
};
const de_CategoryProperties = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        CategoryName: smithy_client_1.expectString,
        CreateTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        InputType: smithy_client_1.expectString,
        LastUpdateTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        Rules: smithy_client_1._json,
    });
};
const de_CategoryPropertiesList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_CategoryProperties(entry, context);
    });
    return retVal;
};
const de_CreateCallAnalyticsCategoryResponse = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        CategoryProperties: (_) => de_CategoryProperties(_, context),
    });
};
const de_CreateMedicalVocabularyResponse = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        FailureReason: smithy_client_1.expectString,
        LanguageCode: smithy_client_1.expectString,
        LastModifiedTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        VocabularyName: smithy_client_1.expectString,
        VocabularyState: smithy_client_1.expectString,
    });
};
const de_CreateVocabularyFilterResponse = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        LanguageCode: smithy_client_1.expectString,
        LastModifiedTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        VocabularyFilterName: smithy_client_1.expectString,
    });
};
const de_CreateVocabularyResponse = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        FailureReason: smithy_client_1.expectString,
        LanguageCode: smithy_client_1.expectString,
        LastModifiedTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        VocabularyName: smithy_client_1.expectString,
        VocabularyState: smithy_client_1.expectString,
    });
};
const de_DescribeLanguageModelResponse = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        LanguageModel: (_) => de_LanguageModel(_, context),
    });
};
const de_GetCallAnalyticsCategoryResponse = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        CategoryProperties: (_) => de_CategoryProperties(_, context),
    });
};
const de_GetCallAnalyticsJobResponse = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        CallAnalyticsJob: (_) => de_CallAnalyticsJob(_, context),
    });
};
const de_GetMedicalTranscriptionJobResponse = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        MedicalTranscriptionJob: (_) => de_MedicalTranscriptionJob(_, context),
    });
};
const de_GetMedicalVocabularyResponse = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        DownloadUri: smithy_client_1.expectString,
        FailureReason: smithy_client_1.expectString,
        LanguageCode: smithy_client_1.expectString,
        LastModifiedTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        VocabularyName: smithy_client_1.expectString,
        VocabularyState: smithy_client_1.expectString,
    });
};
const de_GetTranscriptionJobResponse = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        TranscriptionJob: (_) => de_TranscriptionJob(_, context),
    });
};
const de_GetVocabularyFilterResponse = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        DownloadUri: smithy_client_1.expectString,
        LanguageCode: smithy_client_1.expectString,
        LastModifiedTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        VocabularyFilterName: smithy_client_1.expectString,
    });
};
const de_GetVocabularyResponse = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        DownloadUri: smithy_client_1.expectString,
        FailureReason: smithy_client_1.expectString,
        LanguageCode: smithy_client_1.expectString,
        LastModifiedTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        VocabularyName: smithy_client_1.expectString,
        VocabularyState: smithy_client_1.expectString,
    });
};
const de_LanguageCodeItem = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        DurationInSeconds: smithy_client_1.limitedParseFloat32,
        LanguageCode: smithy_client_1.expectString,
    });
};
const de_LanguageCodeList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_LanguageCodeItem(entry, context);
    });
    return retVal;
};
const de_LanguageModel = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        BaseModelName: smithy_client_1.expectString,
        CreateTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        FailureReason: smithy_client_1.expectString,
        InputDataConfig: smithy_client_1._json,
        LanguageCode: smithy_client_1.expectString,
        LastModifiedTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        ModelName: smithy_client_1.expectString,
        ModelStatus: smithy_client_1.expectString,
        UpgradeAvailability: smithy_client_1.expectBoolean,
    });
};
const de_ListCallAnalyticsCategoriesResponse = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        Categories: (_) => de_CategoryPropertiesList(_, context),
        NextToken: smithy_client_1.expectString,
    });
};
const de_ListCallAnalyticsJobsResponse = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        CallAnalyticsJobSummaries: (_) => de_CallAnalyticsJobSummaries(_, context),
        NextToken: smithy_client_1.expectString,
        Status: smithy_client_1.expectString,
    });
};
const de_ListLanguageModelsResponse = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        Models: (_) => de_Models(_, context),
        NextToken: smithy_client_1.expectString,
    });
};
const de_ListMedicalTranscriptionJobsResponse = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        MedicalTranscriptionJobSummaries: (_) => de_MedicalTranscriptionJobSummaries(_, context),
        NextToken: smithy_client_1.expectString,
        Status: smithy_client_1.expectString,
    });
};
const de_ListMedicalVocabulariesResponse = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        NextToken: smithy_client_1.expectString,
        Status: smithy_client_1.expectString,
        Vocabularies: (_) => de_Vocabularies(_, context),
    });
};
const de_ListTranscriptionJobsResponse = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        NextToken: smithy_client_1.expectString,
        Status: smithy_client_1.expectString,
        TranscriptionJobSummaries: (_) => de_TranscriptionJobSummaries(_, context),
    });
};
const de_ListVocabulariesResponse = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        NextToken: smithy_client_1.expectString,
        Status: smithy_client_1.expectString,
        Vocabularies: (_) => de_Vocabularies(_, context),
    });
};
const de_ListVocabularyFiltersResponse = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        NextToken: smithy_client_1.expectString,
        VocabularyFilters: (_) => de_VocabularyFilters(_, context),
    });
};
const de_MedicalTranscriptionJob = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        CompletionTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        ContentIdentificationType: smithy_client_1.expectString,
        CreationTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        FailureReason: smithy_client_1.expectString,
        LanguageCode: smithy_client_1.expectString,
        Media: smithy_client_1._json,
        MediaFormat: smithy_client_1.expectString,
        MediaSampleRateHertz: smithy_client_1.expectInt32,
        MedicalTranscriptionJobName: smithy_client_1.expectString,
        Settings: smithy_client_1._json,
        Specialty: smithy_client_1.expectString,
        StartTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        Tags: smithy_client_1._json,
        Transcript: smithy_client_1._json,
        TranscriptionJobStatus: smithy_client_1.expectString,
        Type: smithy_client_1.expectString,
    });
};
const de_MedicalTranscriptionJobSummaries = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_MedicalTranscriptionJobSummary(entry, context);
    });
    return retVal;
};
const de_MedicalTranscriptionJobSummary = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        CompletionTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        ContentIdentificationType: smithy_client_1.expectString,
        CreationTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        FailureReason: smithy_client_1.expectString,
        LanguageCode: smithy_client_1.expectString,
        MedicalTranscriptionJobName: smithy_client_1.expectString,
        OutputLocationType: smithy_client_1.expectString,
        Specialty: smithy_client_1.expectString,
        StartTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        TranscriptionJobStatus: smithy_client_1.expectString,
        Type: smithy_client_1.expectString,
    });
};
const de_Models = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_LanguageModel(entry, context);
    });
    return retVal;
};
const de_StartCallAnalyticsJobResponse = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        CallAnalyticsJob: (_) => de_CallAnalyticsJob(_, context),
    });
};
const de_StartMedicalTranscriptionJobResponse = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        MedicalTranscriptionJob: (_) => de_MedicalTranscriptionJob(_, context),
    });
};
const de_StartTranscriptionJobResponse = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        TranscriptionJob: (_) => de_TranscriptionJob(_, context),
    });
};
const de_TranscriptionJob = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        CompletionTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        ContentRedaction: smithy_client_1._json,
        CreationTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        FailureReason: smithy_client_1.expectString,
        IdentifiedLanguageScore: smithy_client_1.limitedParseFloat32,
        IdentifyLanguage: smithy_client_1.expectBoolean,
        IdentifyMultipleLanguages: smithy_client_1.expectBoolean,
        JobExecutionSettings: smithy_client_1._json,
        LanguageCode: smithy_client_1.expectString,
        LanguageCodes: (_) => de_LanguageCodeList(_, context),
        LanguageIdSettings: smithy_client_1._json,
        LanguageOptions: smithy_client_1._json,
        Media: smithy_client_1._json,
        MediaFormat: smithy_client_1.expectString,
        MediaSampleRateHertz: smithy_client_1.expectInt32,
        ModelSettings: smithy_client_1._json,
        Settings: smithy_client_1._json,
        StartTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        Subtitles: smithy_client_1._json,
        Tags: smithy_client_1._json,
        Transcript: smithy_client_1._json,
        TranscriptionJobName: smithy_client_1.expectString,
        TranscriptionJobStatus: smithy_client_1.expectString,
    });
};
const de_TranscriptionJobSummaries = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_TranscriptionJobSummary(entry, context);
    });
    return retVal;
};
const de_TranscriptionJobSummary = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        CompletionTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        ContentRedaction: smithy_client_1._json,
        CreationTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        FailureReason: smithy_client_1.expectString,
        IdentifiedLanguageScore: smithy_client_1.limitedParseFloat32,
        IdentifyLanguage: smithy_client_1.expectBoolean,
        IdentifyMultipleLanguages: smithy_client_1.expectBoolean,
        LanguageCode: smithy_client_1.expectString,
        LanguageCodes: (_) => de_LanguageCodeList(_, context),
        ModelSettings: smithy_client_1._json,
        OutputLocationType: smithy_client_1.expectString,
        StartTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        TranscriptionJobName: smithy_client_1.expectString,
        TranscriptionJobStatus: smithy_client_1.expectString,
    });
};
const de_UpdateCallAnalyticsCategoryResponse = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        CategoryProperties: (_) => de_CategoryProperties(_, context),
    });
};
const de_UpdateMedicalVocabularyResponse = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        LanguageCode: smithy_client_1.expectString,
        LastModifiedTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        VocabularyName: smithy_client_1.expectString,
        VocabularyState: smithy_client_1.expectString,
    });
};
const de_UpdateVocabularyFilterResponse = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        LanguageCode: smithy_client_1.expectString,
        LastModifiedTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        VocabularyFilterName: smithy_client_1.expectString,
    });
};
const de_UpdateVocabularyResponse = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        LanguageCode: smithy_client_1.expectString,
        LastModifiedTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        VocabularyName: smithy_client_1.expectString,
        VocabularyState: smithy_client_1.expectString,
    });
};
const de_Vocabularies = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_VocabularyInfo(entry, context);
    });
    return retVal;
};
const de_VocabularyFilterInfo = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        LanguageCode: smithy_client_1.expectString,
        LastModifiedTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        VocabularyFilterName: smithy_client_1.expectString,
    });
};
const de_VocabularyFilters = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_VocabularyFilterInfo(entry, context);
    });
    return retVal;
};
const de_VocabularyInfo = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        LanguageCode: smithy_client_1.expectString,
        LastModifiedTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        VocabularyName: smithy_client_1.expectString,
        VocabularyState: smithy_client_1.expectString,
    });
};
const deserializeMetadata = (output) => ({
    httpStatusCode: output.statusCode,
    requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"],
});
const collectBodyString = (streamBody, context) => (0, smithy_client_1.collectBody)(streamBody, context).then((body) => context.utf8Encoder(body));
const throwDefaultError = (0, smithy_client_1.withBaseException)(TranscribeServiceException_1.TranscribeServiceException);
const buildHttpRpcRequest = async (context, headers, path, resolvedHostname, body) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const contents = {
        protocol,
        hostname,
        port,
        method: "POST",
        path: basePath.endsWith("/") ? basePath.slice(0, -1) + path : basePath + path,
        headers,
    };
    if (resolvedHostname !== undefined) {
        contents.hostname = resolvedHostname;
    }
    if (body !== undefined) {
        contents.body = body;
    }
    return new protocol_http_1.HttpRequest(contents);
};
function sharedHeaders(operation) {
    return {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": `Transcribe.${operation}`,
    };
}
const parseBody = (streamBody, context) => collectBodyString(streamBody, context).then((encoded) => {
    if (encoded.length) {
        return JSON.parse(encoded);
    }
    return {};
});
const parseErrorBody = async (errorBody, context) => {
    const value = await parseBody(errorBody, context);
    value.message = value.message ?? value.Message;
    return value;
};
const loadRestJsonErrorCode = (output, data) => {
    const findKey = (object, key) => Object.keys(object).find((k) => k.toLowerCase() === key.toLowerCase());
    const sanitizeErrorCode = (rawValue) => {
        let cleanValue = rawValue;
        if (typeof cleanValue === "number") {
            cleanValue = cleanValue.toString();
        }
        if (cleanValue.indexOf(",") >= 0) {
            cleanValue = cleanValue.split(",")[0];
        }
        if (cleanValue.indexOf(":") >= 0) {
            cleanValue = cleanValue.split(":")[0];
        }
        if (cleanValue.indexOf("#") >= 0) {
            cleanValue = cleanValue.split("#")[1];
        }
        return cleanValue;
    };
    const headerKey = findKey(output.headers, "x-amzn-errortype");
    if (headerKey !== undefined) {
        return sanitizeErrorCode(output.headers[headerKey]);
    }
    if (data.code !== undefined) {
        return sanitizeErrorCode(data.code);
    }
    if (data["__type"] !== undefined) {
        return sanitizeErrorCode(data["__type"]);
    }
};
